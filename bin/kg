#!/usr/bin/env node

const { spawn } = require("child_process");
const pkg = require("../package.json");
const path = require('path');
const kgHelper = require('../index');
const commandLineArgs = require('command-line-args')

if (process.argv.length < 3) {
  kgHelper.printUsage();
} else {
  const mainDefinitions = [
    { name: 'name', defaultOption: true }
  ];
  const mainCommand = commandLineArgs(mainDefinitions, { stopAtFirstUnknown: true })
  let argv = mainCommand._unknown || []

  if (mainCommand.name === 'key') {
    const subCommandDefinitions = [
      { name: 'name', defaultOption: true }
    ];
    const subCommand = commandLineArgs(subCommandDefinitions, { argv, stopAtFirstUnknown: true });
    argv = subCommand._unknown || [];

    if (subCommand.name === 'generate') {
      // Generating New Keystore
      process.stdout.write("Generating New Keystore" + "\n");

      var alias = 'Unknown',
          password = 'Unknown',
          fullName = 'Unknown',
          organizationUnit = 'Unknown',
          organization = 'Unknown',
          city = 'Unknown',
          state = 'Unknown',
          countryCode = 'Unknown';

      const main = async () => {
        alias = await kgHelper.promptQuiz(`Enter Alias name: `);
        password = await kgHelper.promptQuiz(`Enter keystore password: `);
        fullName = await kgHelper.promptQuiz(`What is your first and last name?\n [Unknow]: `);
        organizationUnit = await kgHelper.promptQuiz(`What is the name of your organizational unit?\n [Unknow]: `);
        organization = await kgHelper.promptQuiz(`What is the name of your organization?\n [Unknow]: `);
        city = await kgHelper.promptQuiz(`What is the name of your City or Locality?\n [Unknow]: `);
        state = await kgHelper.promptQuiz(`What is the name of your State or Province?\n [Unknow]: `);
        countryCode = await kgHelper.promptQuiz(`What is the two-letter country code for this unit?\n [Unknow]: `);
        
        kgHelper.closeReadline();

        const keytoolCmd = spawn("keytool", ["-genkey", "-v", "-keystore", "my-release-key.keystore", "-keyalg", "RSA", "-keysize", "2048", "-validity", "10000", "-alias", alias]);

        keytoolCmd.stdout.on("data", data => {
          process.stdout.write((`${data}`));
        });

        keytoolCmd.stderr.on("data", data => {
          keytoolCmd.stdin.write(password + "\r\n");
          keytoolCmd.stdin.write(password + "\r\n");
          keytoolCmd.stdin.write(fullName + "\r\n");
          keytoolCmd.stdin.write(organizationUnit + "\r\n");
          keytoolCmd.stdin.write(organization + "\r\n");
          keytoolCmd.stdin.write(city + "\r\n");
          keytoolCmd.stdin.write(state + "\r\n");
          keytoolCmd.stdin.write(countryCode + "\r\n");
          keytoolCmd.stdin.write("yes\r\n");
        });

        keytoolCmd.on('error', (error) => {
          process.stdout.write(`error: ${error.message}\n`);
        });

        keytoolCmd.on("close", code => {
          if (code === 0) {
            process.stdout.write("Keystore generated successfully!\n");
          } else {
            process.stdout.write(`child process exited with code ${code}\n`);
          }
        });
      }

      main();
    } else if (subCommand.name === 'sign') {
      const runDefinitions = [
        { name: 'src', alias: 's', type: String },
        { name: 'dest', alias: 'd', type: String }
      ];

      const runOptions = commandLineArgs(runDefinitions, { argv, stopAtFirstUnknown: true });

      console.log('\nrunOptions\n==========');
      console.log(runOptions);
    }
  } else {
    kgHelper.printUsage();
  }
}
